import better.files.Resource
import io.circe.parser.decode
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers._
import work.arudenko.bot.rules.Rule
import work.arudenko.bot.rules.RuleSerializer._
import java.time.format.DateTimeFormatter
import java.text.DateFormat
import java.time.LocalDate

class AnswerSpec  extends AnyFlatSpec with should.Matchers {

  "answer with options" should "return random option as an answer" in {
    val decoded: Rule = decode[List[Rule]](Resource.getAsString("answers.json")).toTry.get.tail.head
    Seq(
      "I've seen things you people wouldn't believe..",
      "A robot may not injure a human being or, through inaction, allow a human being to come to harm.",
      "A robot must obey the orders given it by human beings except where such orders would conflict with the First Law.",
      "A robot must protect its own existence as long as such protection does not conflict with the First or Second Law."
    ) should contain (decoded.getAnswer.get(""))
  }

  "answer with call to program" should "return execution result from stdout as an answer" in {
    val decoded: Rule = decode[List[Rule]](Resource.getAsString("answers_external.json")).toTry.get.head
    val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
    decoded.getAnswer.get("") shouldBe LocalDate.now().format(formatter)+"\n"
  }

  "answer with call to another file" should "return answer result according to answer specified in that file" in{
    val decoded: Rule = decode[List[Rule]](Resource.getAsString("answers_resource.json")).toTry.get.head
    //postfix parameter adds specified postfix to each answer. There is also prefix parameter that adds prefix
    Seq(
      "The Godfather (1972) is worth watching",
      "The Silence of the Lambs (1991) is worth watching",
      "Star Wars: Episode V - The Empire Strikes Back (1980) is worth watching",
      "The Shawshank Redemption (1994) is worth watching"
    ) should contain (decoded.getAnswer.get(""))

  }

  "answer with call to markov chain" should "return some string generated by chain" in{
    val decoded: Rule = decode[List[Rule]](Resource.getAsString("answers_markov.json")).toTry.get.head
    println(decoded.getAnswer.get("")) //there are no guarantees regarding length or content
  }




}
